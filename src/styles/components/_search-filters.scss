.search-filters {
  $b: &;

  &__container {
    position: fixed;
    width: 100%;
    z-index: 102;
    left: 0;
    top: 0;
    bottom: 0;
    max-width: 420px;
    transform: translateX(calc(-100% - 1px));
    @include transition(transform, 666ms);
    background-color: $colorWhite;

    body.filters-open & {
      transform: translateX(0);
    }

    &#{&}--horizontal,
    &#{&}--vertical {
      // On Desktop we don't want them to be slide-out

      @media screen and (min-width: $large) {
        z-index: 1;
        position: relative;
        max-width: unset;
        transform: unset;
        padding-bottom: 0;
      }

      // The use of #{$b} allows us to access the top level class from within a
      // modifier. The below will compile to .search-filters__inner
      #{$b}__inner {
        @media screen and (min-width: $large) {
          height: unset;
          overflow: unset;
        }
      }

      #{$b}__header {
        @media screen and (min-width: $large) {
          display: none;
        }
      }
    }

    &#{&}--horizontal {
      #{$b}__footer {
        @media screen and (min-width: $large) {
          display: none;
        }
      }
    }
  }

  &__inner {
    overflow-y: auto;
    height: var(--app-height, 100vh); // see appHeight.js for how/where/why this var gets set
    display: flex;
    flex-direction: column;

    &::-webkit-scrollbar {
      width: 2px;
    }

    &::-webkit-scrollbar-thumb {
      background: $colorBlack;
    }
  }

  &__header {
    // This is the same as &__options-header in filter.scss
    padding: 12px 16px;
    display: flex;
    gap: 6px;
    justify-content: space-between;
    color: white;
    background-color: black;
    align-items: center;
  }

  &__header-close {
    // This is the same as &__options-close in filter.scss
    height: 30px;
    width: 30px;
    display: block;
    cursor: pointer;

    svg {
      width: 100%;
      height: 100%;
      stroke: white;
    }
  }

  &__filters {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  &__overlay {
    opacity: 0;
    @include transition(opacity, 666ms);
    pointer-events: none;
    position: fixed;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    z-index: 101;
    background-color: $colorBlack;

    body.filters-open & {
      opacity: 0.33;
      pointer-events: all;
    }
  }
}
